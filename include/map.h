#ifndef TILEMAP_4_RENDERER_H
#define TILEMAP_4_RENDERER_H

namespace Tilemaps
{
    const int WIDTH = 40;
    const int HEIGHT = 30;
    const int TILE_SIZE = 16;

    // TODO: IMPLEMENT A METHOD WHICH CONVERTS A 1D MAP TO 2D MAP
    int backgroundLayer[WIDTH * HEIGHT] = {
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 243, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 245, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 283, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 285, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 283, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 285, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 283, 284, 284, 1, 64, 64, 64, 64, 64, 64, 64, 64, 64, 284, 284, 285, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 283, 284, 284, 64, 1, 1, 1, 1, 1, 1, 1, 1, 64, 284, 284, 285, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 283, 284, 284, 64, 1, 1, 1, 1, 1, 1, 1, 1, 64, 284, 284, 285, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 283, 284, 284, 64, 1, 1, 1, 1, 1, 1, 1, 1, 64, 284, 284, 285, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 283, 284, 284, 64, 1, 1, 1, 1, 1, 1, 1, 1, 64, 284, 284, 285, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 283, 284, 284, 64, 1, 1, 1, 1, 1, 1, 1, 1, 64, 284, 284, 285, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 283, 284, 284, 64, 1, 1, 1, 1, 1, 1, 1, 1, 64, 284, 284, 285, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 283, 284, 284, 1, 1, 1, 1, 1, 1, 1, 1, 1, 64, 284, 284, 285, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 283, 284, 284, 1, 64, 64, 64, 64, 64, 64, 64, 64, 1, 284, 284, 285, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 283, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 285, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 283, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 285, 1, 1, 1, 1, 1, 1, 1, 1, 121, 122, 122, 122, 122, 122, 123, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 323, 324, 324, 324, 324, 324, 324, 324, 324, 324, 324, 324, 324, 324, 324, 325, 1, 1, 1, 1, 1, 1, 1, 1, 161, 162, 162, 162, 162, 162, 163, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 161, 162, 162, 162, 162, 162, 163, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 161, 162, 162, 162, 162, 162, 163, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 161, 162, 162, 162, 162, 162, 163, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1297, 1298, 1299, 1, 1, 1, 161, 162, 162, 162, 162, 162, 163, 1,
        1, 1, 1, 1, 1, 1134, 1134, 1134, 1134, 1134, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1337, 1338, 1339, 1, 1, 1, 161, 162, 162, 162, 162, 162, 163, 1,
        614, 614, 1134, 1134, 1134, 1134, 1134, 1134, 1134, 1134, 1134, 1134, 1134, 1134, 1134, 1134, 1134, 1134, 1134, 1134, 1134, 1134, 1134, 1134, 1, 1, 1, 1, 1, 1, 1, 1, 161, 162, 162, 162, 162, 162, 163, 1,
        614, 615, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 162, 162, 162, 162, 162, 162, 163, 1,
        614, 615, 614, 615, 614, 614, 614, 614, 614, 614, 614, 615, 614, 615, 614, 615, 614, 615, 614, 615, 614, 615, 614, 615, 614, 615, 614, 615, 614, 615, 614, 615, 162, 162, 162, 162, 162, 162, 163, 1,
        654, 655, 654, 655, 654, 655, 654, 655, 654, 655, 654, 655, 654, 655, 654, 655, 654, 655, 654, 655, 654, 655, 654, 655, 654, 655, 654, 655, 654, 655, 654, 655, 162, 162, 162, 162, 162, 162, 163, 1,
        614, 615, 1134, 1134, 1134, 1134, 1134, 1134, 1134, 1134, 1134, 1134, 1134, 1134, 1134, 1134, 1134, 1134, 1134, 1134, 1134, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1};

    int objectLayer[WIDTH * HEIGHT] = {
        688, 688, 681, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 365, 366, 366, 366, 366, 367, 368, 369, 369, 369, 369, 369, 368,
        688, 688, 725, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 405, 406, 406, 406, 406, 407, 408, 409, 409, 409, 409, 409, 408,
        688, 688, 725, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 445, 446, 446, 446, 446, 447, 448, 449, 449, 449, 449, 449, 448,
        688, 688, 725, 0, 0, 646, 647, 0, 73, 189, 190, 191, 73, 0, 0, 0, 0, 0, 0, 73, 189, 190, 191, 73, 484, 0, 0, 485, 486, 486, 486, 486, 487, 488, 0, 108, 0, 0, 0, 488,
        688, 688, 725, 484, 0, 686, 687, 0, 113, 229, 230, 231, 113, 0, 121, 122, 122, 123, 0, 113, 229, 230, 231, 113, 0, 0, 0, 525, 526, 526, 526, 526, 527, 208, 208, 208, 208, 208, 208, 208,
        688, 688, 725, 0, 484, 114, 114, 0, 0, 0, 0, 0, 0, 0, 161, 162, 162, 163, 0, 0, 0, 0, 0, 0, 0, 0, 0, 565, 566, 566, 566, 566, 567, 109, 68, 110, 149, 108, 150, 148,
        688, 688, 725, 0, 0, 114, 114, 0, 0, 415, 0, 0, 0, 0, 63, 64, 64, 65, 0, 0, 0, 0, 4, 0, 0, 0, 0, 605, 606, 606, 606, 606, 607, 68, 149, 108, 149, 484, 149, 68,
        688, 688, 725, 484, 0, 114, 114, 0, 0, 0, 383, 384, 385, 0, 63, 64, 64, 65, 0, 383, 384, 385, 0, 0, 0, 0, 484, 0, 0, 0, 0, 0, 0, 484, 68, 68, 149, 68, 484, 0,
        688, 688, 725, 0, 484, 114, 114, 0, 0, 6, 423, 424, 425, 24, 70, 0, 0, 69, 24, 423, 424, 425, 6, 0, 0, 0, 0, 0, 0, 0, 484, 0, 0, 0, 0, 0, 484, 0, 0, 0,
        688, 688, 725, 0, 0, 646, 647, 0, 0, 0, 463, 464, 465, 321, 484, 321, 484, 321, 321, 463, 464, 465, 0, 1148, 1148, 484, 1148, 0, 0, 0, 0, 0, 0, 0, 0, 484, 0, 0, 0, 0,
        688, 688, 725, 484, 0, 686, 687, 0, 0, 0, 0, 63, 321, 484, 484, 321, 484, 321, 484, 484, 65, 1148, 1148, 1148, 1148, 1148, 1148, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        688, 688, 725, 0, 484, 36, 36, 121, 122, 24, 24, 70, 321, 484, 484, 1249, 1250, 321, 321, 321, 69, 24, 24, 122, 123, 1148, 484, 0, 0, 0, 484, 0, 0, 0, 0, 0, 0, 0, 0, 484,
        688, 688, 725, 0, 0, 36, 36, 161, 162, 64, 64, 0, 484, 484, 484, 1289, 1290, 321, 484, 321, 0, 64, 64, 162, 163, 0, 0, 0, 0, 484, 0, 0, 484, 0, 0, 0, 484, 0, 0, 0,
        688, 688, 725, 484, 0, 36, 36, 201, 202, 104, 104, 30, 484, 321, 484, 1329, 1330, 321, 321, 321, 29, 104, 104, 202, 203, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        688, 688, 725, 0, 484, 36, 36, 0, 0, 6, 0, 63, 321, 484, 321, 484, 321, 484, 321, 484, 65, 6, 0, 0, 0, 0, 0, 0, 0, 0, 484, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        688, 688, 725, 0, 0, 646, 647, 0, 0, 0, 383, 384, 385, 321, 321, 321, 321, 484, 321, 383, 384, 385, 0, 0, 0, 0, 0, 484, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        688, 688, 725, 484, 0, 686, 687, 0, 0, 0, 423, 424, 425, 104, 30, 0, 0, 29, 104, 423, 424, 425, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 484, 0, 484, 0, 0, 484, 0,
        688, 688, 725, 0, 484, 114, 114, 0, 0, 0, 463, 464, 465, 0, 63, 64, 64, 65, 0, 463, 464, 465, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        688, 688, 725, 0, 0, 114, 114, 0, 0, 0, 0, 0, 0, 0, 63, 64, 64, 65, 0, 0, 0, 3, 0, 0, 683, 685, 685, 685, 685, 685, 684, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        688, 688, 725, 484, 0, 114, 114, 0, 0, 0, 0, 0, 0, 0, 161, 162, 162, 163, 0, 0, 0, 0, 0, 0, 725, 7, 8, 9, 10, 11, 725, 563, 0, 0, 0, 0, 152, 153, 0, 561,
        688, 688, 725, 0, 484, 114, 114, 0, 0, 0, 0, 0, 0, 0, 201, 202, 202, 203, 0, 0, 0, 0, 0, 0, 725, 47, 48, 49, 50, 51, 725, 561, 0, 450, 451, 0, 192, 193, 0, 601,
        688, 688, 725, 0, 0, 646, 647, 36, 36, 36, 36, 646, 647, 114, 114, 114, 114, 646, 647, 36, 36, 36, 36, 36, 725, 87, 88, 89, 90, 91, 725, 601, 0, 490, 491, 0, 0, 0, 0, 561,
        688, 688, 725, 484, 0, 686, 687, 36, 36, 36, 36, 686, 687, 114, 114, 114, 114, 686, 687, 36, 36, 36, 36, 36, 725, 127, 128, 129, 130, 131, 725, 561, 0, 149, 0, 0, 0, 0, 0, 601,
        688, 688, 725, 0, 484, 0, 0, 322, 483, 483, 322, 483, 483, 322, 483, 483, 322, 483, 483, 322, 483, 483, 483, 322, 725, 167, 168, 169, 170, 171, 725, 601, 0, 0, 0, 0, 0, 110, 0, 561,
        688, 688, 723, 685, 685, 685, 685, 685, 685, 685, 685, 685, 685, 685, 685, 685, 685, 685, 685, 685, 685, 685, 685, 685, 724, 2, 0, 0, 0, 0, 725, 561, 0, 0, 0, 0, 450, 451, 0, 601,
        45, 46, 641, 642, 641, 642, 641, 642, 641, 642, 641, 642, 641, 642, 641, 642, 641, 642, 641, 642, 641, 642, 641, 642, 204, 206, 0, 0, 115, 204, 206, 601, 0, 0, 0, 0, 490, 491, 0, 561,
        85, 86, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 214, 215, 601,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 450, 451, 0, 0, 0, 254, 255, 561,
        45, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 490, 491, 0, 0, 0, 294, 295, 601,
        85, 86, 641, 642, 641, 642, 641, 642, 641, 642, 641, 642, 641, 642, 641, 642, 641, 642, 641, 642, 641, 642, 641, 642, 641, 642, 641, 642, 641, 642, 641, 642, 641, 642, 641, 642, 641, 642, 641, 642};

    int **OneD2TwoD(int *map, const std::size_t width, const std::size_t height, std::size_t size)
    {
        if (size != width * height)
            throw(std::string("invalid map dimensions provided"));

        // XXX: DEALLOCATION REQUIRED
        int **newMap = new int *[height];
        for (int i = 0; i < height; ++i)
        {
            newMap[i] = new int[width];
        }

        for (int y = 0; y < height; ++y)
        {
            for (int x = 0; x < width; ++x)
            {
                newMap[y][x] = map[y * width + x];
            }
        }

        return newMap;
    };

    void deleteTwoDArray(int **array, const int height)
    {
        for (int i = 0; i < height; ++i)
        {
            delete[] array[i];
        }
        delete[] array;
    }
}

#endif